@startuml General
/'skinparam dpi 200'/
skinparam classAttributeIconSize 0
hide circle
/'-----Clases y subclases de soldado----'/
class Soldado {
    -id: int
    #nombre: String
    #vida: int
    #distancia: int
    #movimiento: Movimiento
    #ataque: Ataque
    #reporte: String
    /'-----Metodos----'/
    +muestraAvance(): void
    +muestraReporte(): void
    +muestraMovimiento(): void
}

class Infanteria{
    +Infanteria(distancia: int)
}


class Caballeria{
    +Caballeria(distancia: int)
}

class Artilleria{
    +Artilleria(distancia: int)
}

Soldado <|-- Infanteria
Soldado <|-- Caballeria
Soldado <|-- Artilleria

/'-----Strategy Movimiento----'/
interface Movimiento<<interface>>{
    moverse(): int
}

class MovimientoLento{
    moverse(): int
}

class MovimientoNormal{
    moverse(): int
}

class MovimientoRapido{
    moverse(): int
}
Movimiento <|.. MovimientoLento
Movimiento <|.. MovimientoNormal
Movimiento <|.. MovimientoRapido

Movimiento --o Soldado

/'-----Strategy Ataque----'/
interface Ataque<<interface>>{
    atacar(enemigo: Enemigo): void
}

class AtaqueMosquete{
    atacar(enemigo: Enemigo): void
}

class AtaqueCanon{
    atacar(enemigo: Enemigo): void
}

class AtaquePistola{
    atacar(enemigo: Enemigo): void
}

Ataque <|.. AtaqueMosquete
Ataque <|.. AtaqueCanon
Ataque <|.. AtaquePistola

Soldado o-- Ataque

/'-----Comandante----'/

class Comandante{
    -peloton: List<Soldado>
    -enemigo: Enemigo
    -soldado: Soldado
    +Comandante(soldado: Soldado)
    +notificarAtaque(): void
    +notificarMovimiento(): void
    +notificarReporte(): void
    +muestraAvance(): void
    +muestraReporte(): void
    +muestraMovimiento(): void
}

class Enemigo{
    -vida: int
    -distanciaInicial: int
    +Enemigo(vida: int, distanciaInicial:int)
    +recibeDano(dano:int): void
    +getVida(): int
    +getDistanciaInicial(): int
}

interface IObservable<<interface>>{
    +notificarAtaque(): void
    +notificarMovimiento(): void
    +notificarReporte(): void
}

interface IObservador<<interface>>{
    +muestraAvance(): void
    +muestraReporte(): void
    +muestraMovimiento(): void
}

Comandante --|> Soldado
Comandante ..|> IObservable
IObservador <|.. Soldado
Comandante o-- Enemigo

/'-----BuilderPelotones----'/

class ConstructorPelotones{
    +{static} TIPOS: String[]
    -comandante: Comandante
    -enemigo: Enemigo
    +ConstructorPelotones(tipoComandante: String, enemigo: Enemigo)
    +agregaSoldados(tipo: String, numero: int): void
    -creaSoldado(tipo: String): Soldado
    +getInstancia(): Comandante
}

Comandante --o ConstructorPelotones
Soldado -->ConstructorPelotones :use

class Usuario{
    -comandantes: List<Comandantes>
    +Usuario()
    +ordenaAtaque(): void
    +ordenaMoverse(): void
    +ordenaReportarse(): void
    +agregaPeloton(): void
    -creaEjercito(): ArrayList<Comandantes>
}

class UsuarioConEjercitoKamikase{
    +UsuarioConEjercitoKamikase()
    -creaEjercito: ArrayList<Comandantes>
}


class UsuarioConEjercitoExplorador{
    +UsuarioConEjercitoExplorador()
    -creaEjercito: ArrayList<Comandantes>
}

class UsuarioConEjercitoDefault{
    +UsuarioConEjercitoDefault()
    -creaEjercito: ArrayL ist<Comandantes>
} 
Usuario <-- Comandante: use
Usuario <|-- UsuarioConEjercitoKamikase
Usuario <|-- UsuarioConEjercitoExplorador
Usuario <|-- UsuarioConEjercitoDefault
@enduml
